## This function creates a special "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {
    i <- NULL
    set <- function(y) {
        x <<- y
        i <<- NULL
    }
    
    get <- function() x
    setinverse <- function(solve) i <<- solve
    getinverse <- function() i
    list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}


## Write a short comment describing this function

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        i <- x$getinverse()
        if (!is.null(i)) {
            message ("getting cached data")
            return (i)
        }
        data <- x$get()
        i <- solve(data, ...)
        x$setinverse(i)
        i
}

x = matrix(c(1,3,4,
             5,3,2,
             7,2,1), nrow=3, ncol=3)
x

x.iv <- cacheSolve(makeCacheMatrix(x))
x.iv

y = x %*% x.iv
y
